//
//  ViewController.swift
//  Concetration
//
//  Created by –ö–∏—Ä–∏–ª–ª –°–º–∏—Ä–Ω–æ–≤ on 12/02/2019.
//  Copyright ¬© 2019 asu. All rights reserved.
//

import UIKit

private var arrayEmoji: [String: [String]] = [
                            "number":  ["1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£","7Ô∏è‚É£","8Ô∏è‚É£"],
                            "car": ["üöó","üöï","üöô","üöå","üöé","üèé","üöì","üöë"],
                            "smile": ["üòÄ","üò≠","üò±","üòá","üòõ","üòç","üòé","ü§ì"],
                            "flag": ["üá∫üá∏","üáØüáµ","üá¶üá∫","üá¶üáø","üá∞üáø","üá®üá≥","üáπüá∑","üá®üá¶"],
                            "ball": ["‚öΩÔ∏è","üèÄ","üèà","‚öæÔ∏è","ü•é","üéæ","üèê","üèâ"],
                            "fruit": ["üçè","üçì","üçê","üçä","üçã","üçç","üçá","üçå"]
                        ]





class ViewController: UIViewController {
    
    @IBOutlet private weak var countLabel: UILabel!
    @IBOutlet private weak var score: UILabel!
    @IBOutlet weak var buttonNewGame: UIButton!
    
    private(set) var count = 0 {
        didSet {
            self.countLabel.text = "üëÜ : \(self.count)"
        }
    }
    
    private(set) var scoreInt = 0 {
        didSet {
            self.score.text = "‚≠êÔ∏è : \(self.scoreInt)"
        }
    }
    
    @IBAction func actionNewGame(_ sender: UIButton) {
        newGame()
    }
    
    
    var numberOfPairsCard: Int {
        //print("numberOfPairsCard = ",self.cardButtons.count,"( ",((self.cardButtons.count+1)/2)," )")
        return (self.cardButtons.count + 1) / 2  // ??? –ø–æ—á–µ–º—É +1 /2 ??? –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ /2 ?
    }
    
    // –°–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ GAME.cards = [Card]
    
    private lazy var game = Concentration(numberOfPairsCard: self.numberOfPairsCard)
    
    // –°–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    @IBOutlet private var cardButtons: [UIButton]!
    // —Ç—É—Ç –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –º–∞–∫–µ—Ç–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –º–∞—Å—Å–∏–≤
    
    private lazy var emojiArray: [String] = randomEmoji() // ( allCases - convert enum to array )
    //–°–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π,
    // —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ –º–µ—Ä–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏, –æ–Ω–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ emoji
 
    
    private var emoji: [Card: String] = [:]  // –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
    
    //—Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –Ω–∞–∂–∞—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    
    
    @IBAction private func emojiButtonAction(_ sender: UIButton) {
        // –∏—â–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        if let index = self.cardButtons.firstIndex(of: sender) {
            
            self.game.chooseCard(at: index)
            scoreInt = self.game.score
            self.updateViewModel()
            count += 1
            
            
            
        } else {
            print("Unhandled Error!!!")
        }
        //print("->",emoji,"<-")
        
    }
    
    private func updateViewModel() {
        var isNotFaceUpAndNotMatched: Int = 0
        for index in self.cardButtons.indices {
            
            let button = self.cardButtons[index]
            let card = self.game.cards[index]
            
            
            if card.isFaceUp {
                button.setTitle(self.emoji(for: card), for: .normal)
                button.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
            } else {
                button.setTitle("", for: .normal)
                if(card.isMatched){
                  button.backgroundColor = #colorLiteral(red: 1, green: 0.6910475492, blue: 0, alpha: 0)
                }else{
                    isNotFaceUpAndNotMatched += 1
                    button.backgroundColor = #colorLiteral(red: 1, green: 0.6910475492, blue: 0, alpha: 1)
                }
                
            }
        }
        
        if(isNotFaceUpAndNotMatched == 0){
            alertTheEnd()
        }
        
    }
    
    
    // –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ emoji —ç–ª–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ —Å–º–∞–π–ª–∏–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è.
    // —É–¥–∞–ª—è–µ—Ç –∏–∑ emojiArray —Å–º–∞–π–ª–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞–∂–∞—Ç—ã (–∏–ª–∏ –Ω–∞–∂–∞—Ç—ã –∏—Ö –∫–æ–ø–∏–∏)
    // –≤ –Ω–∞—á–∞–ª–µ –≤ emojiArray 8 —Å–º–∞–π–ª–∏–∫–æ–≤
    private func emoji(for card: Card) -> String {
        if self.emoji[card] == nil, self.emojiArray.count > 0 {
            self.emoji[card] = self.emojiArray.remove(at: self.emojiArray.count.arc4random)
            //print("self.emoji[card] = \(self.emoji[card]!)")
            // self.emojiArray.count.arc4random - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ N - 1
        }
        
        return self.emoji[card] ?? "?"
    }
    
    
    public func randomEmoji() -> [String] {
        ///fgdgf
        var randomNumber: Int = arrayEmoji.count.arc4random // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        
        // —Ç–∞–∫ –∫–∞–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –Ω–µ–ª—å–∑—è –±—Ä–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∏–Ω–¥–µ–∫—Å–∞,
        // —Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–º—É —Ü–∏–∫–ª–æ–º —Å–æ —Å—á–µ—Ç—á–∏–∫–æ–º
        for value in arrayEmoji.values {
            if(randomNumber == 0){
                return value
            }
            randomNumber -= 1
        }
        
        return arrayEmoji["car"]! // —ç—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è =)
    }
    
    func alertTheEnd() {
        
        // create the alert
        let alert = UIAlertController(title: "The end", message: "–í–∞—à —Å—á–µ—Ç: \(scoreInt)", preferredStyle: UIAlertController.Style.alert)
        
        // add an action (button)
        alert.addAction(UIAlertAction(title: "New Game", style: UIAlertAction.Style.default, handler: { action in
            self.newGame()
        }))
        
        // show the alert
        self.present(alert, animated: true, completion: nil)
        
    }
    
    func newGame(){
        game = Concentration(numberOfPairsCard: self.numberOfPairsCard)
        count = 0
        scoreInt = 0
        emojiArray = randomEmoji()
        emoji = [:]
        updateViewModel()
    }
    
}
